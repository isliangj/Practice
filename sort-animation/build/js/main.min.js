;(function() {
  'use strict'

  //冒泡排序
  function bubbleSort(arr) {
    var resArr = arr.slice()
    var len = resArr.length
    var i = len - 1
    while (i--) {
      var sortOk = true
      for (let j = 0; j < resArr.length - 1; j++) {
        var temp = resArr[j]
        if (resArr[j + 1] < resArr[j]) {
          this.pushHis(resArr.slice(), j)
          temp = resArr[j]
          resArr[j] = resArr[j + 1]
          resArr[j + 1] = temp
          sortOk = false
        }
        this.pushHis(resArr.slice(), j)
      }
      if (sortOk == true) {
        break
      }
    }
    return resArr
  }

  function bubbleSortDom(arr, j) {
    var html = ''
    var item = ''
    for (let i = 0; i < arr.length; i++) {
      if (i == j + 1 || i == j) {
        item = '<li class="sort_li"><span class="sort_span sort_span_blue" style="height: ' + arr[i] + '%"></span></li>'
      } else {
        item = '<li class="sort_li"><span class="sort_span" style="height: ' + arr[i] + '%"></span></li>'
      }
      html = html + item
    }

    document.querySelector('.sort_ul').innerHTML = html
  }
  /*
  *  arr:数组
  *  a:当前已完成排序的数量。排序循环中的i。
  *  b:当前在比较的位。循环中的j+1;
  *  temp:当前比较的值;
  */

  function insertSortDom(arr, a, b, temp) {
    var html = ''
    var item = ''
    var spanClass = ''
    for (let i = 0; i < arr.length; i++) {
      spanClass = 'sort_span'

      if (i <= a) {
        spanClass += ' sort_span_blue'
      }

      item = '<li class="sort_li"><span class="' + spanClass + '" style="height: ' + arr[i] + '%"></span></li>'

      if (i == b) {
        item =
          '<li class="sort_li"><span class="' +
          spanClass +
          '" style="height: ' +
          arr[i] +
          '%"></span><span class="sort_span_in" style="height:' +
          temp +
          '%"></span></li>'
      }

      html = html + item
    }

    document.querySelector('.sort_ul').innerHTML = html
  }

  //插入排序：
  function insertSort(oriArr) {
    var arr = oriArr.slice()

    for (let i = 1; i < arr.length; i++) {
      var temp = arr[i]
      for (var j = i - 1; j > -1; j--) {
        if (arr[j] > temp) {
          arr[j + 1] = arr[j]
          this.pushHis(arr.slice(), i - 1, j + 1, temp)
        } else {
          break
        }
      }
      arr[j + 1] = temp
      this.pushHis(arr.slice(), i, j, temp)
    }
    return arr
  }
  function mergeSort(oriArr) {
    var arr = oriArr.slice()
    var gap = 1
    var gapArr = []
    var n = 0
    while (gap < arr.length - 1) {
      gap = Math.pow(2, n)
      if (gap <= arr.length - 1) {
        gapArr.push(gap)
      }
      n++
    }
    var glen = gapArr.length
    for (var i = 0; i < glen; i++) {
      gap = gapArr[i]
      for (let j = 0; j < arr.length; j = j + gap * 2) {
        s1.call(this, arr, j, j + gap * 2 - 1, gap) //借用方法。其实是为了传递this。
      }
    }
    return arr
  }

  //a是开始游标。b是结束游标。n是左数组的长度。

  function s1(arr, a, b, n) {
    var n

    if (arr.length < 2 || n == 0 || b - a + 1 == n) {
      return arr
    }

    if (b > arr.length - 1) {
      //归并时后面一个数组的b可能超出数组。因为它是加的gap*2。这时要让这个b标识到整个数组最后一位去。
      b = arr.length - 1
    }

    for (let i = a, j = a + n; j <= b; ) {
      if (arr[i] < arr[j]) {
        i++
        n--
        this.pushHis(arr.slice(), i - 1, j, a, b)
        continue
      } else {
        var temp = arr[j]
        for (var k = j; k > i; k--) {
          this.pushHis(arr.slice(), i, j, a, b, k, temp)
          arr[k] = arr[k - 1]
        }
        arr[i] = temp
        j++
        i++
        this.pushHis(arr.slice(), i - 1, j - 1, a, b)
        continue
      }
    }
  }

  /*
  *  arr:数组
  *  a:左边数组比较到哪一位。
  *  b:右边数组比较到哪一位。
  *  c:标记本轮插入排序的开始位。
  *  d:标记本轮插入排序的结束位。
  *  tag:当前在对比的序号;循环中的k
  *  temp:当前在找位的值;
  */

  function mergeSortDom(arr, a, b, c, d, tag, temp) {
    var html = ''
    var item = ''
    if (a == b) {
      a = a - 1
    }
    for (let i = 0; i < arr.length; i++) {
      spanClass = 'sort_span'

      if (c <= i && i <= d) {
        spanClass += ' sort_span_blue'
      }

      if (i == a || i == b) {
        spanClass += ' sort_span_green'
      }

      if (tag && i == tag) {
        item =
          '<li class="sort_li"><span class="' +
          spanClass +
          '" style="height: ' +
          arr[i] +
          '%"></span><span class="sort_span_in" style="height:' +
          temp +
          '%"></span></li>'
      } else {
        item = '<li class="sort_li"><span class="' + spanClass + '" style="height: ' + arr[i] + '%"></span></li>'
      }
      html = html + item
    }
    document.querySelector('.sort_ul').innerHTML = html
  }
  //快速排序。  给一个tag。比它小的放在左边的数组，比它大的放到右边的数组。然后左边数组和右边数组进行同样的操作，直到排序完成。 这是用的递归实现 。
  // a,b标记起始位

  function quickSort(arr, a, b, qArr) {
    var leftArr = []
    var rightArr = []
    var k
    var lb
    var ra
    if (a == undefined && b == undefined) {
      a = 0
      b = arr.length - 1 //初始化起始位置。
    }
    if (qArr == undefined) {
      qArr = arr.slice()
    }

    if ((arr.length == 2 && arr[0] == arr[1]) || arr.length < 2) {
      return arr
    }

    var tag = qArr[a]

    for (let i = 1; i < arr.length; ) {
      if (qArr[a + i] <= tag) {
        leftArr.push(qArr[a + i])
        qArr[a + i - 1] = qArr[a + i]
        qArr[a + i] = tag
        k = a + i
        i++
      } else {
        if (leftArr.length + rightArr.length == arr.length - 1) {
          break
        }
        var temp = qArr[a + i]
        qArr[a + i] = qArr[b - rightArr.length]
        qArr[b - rightArr.length] = temp
        rightArr.push(temp)
        k = a + i - 1
      }
      this.pushHis(qArr.slice(), a, b, k)
    }

    var len_l = leftArr.length
    var len_r = rightArr.length
    if (len_l == 0) {
      lb = a
    } else {
      lb = a + len_l - 1
      this.sort(leftArr, a, lb, qArr)
    }

    if (len_r == 0) {
      ra = b
    } else {
      ra = b + 1 - len_r
      this.sort(rightArr, ra, b, qArr)
    }
    return qArr
  }

  /*
  *  arr:数组
  *  a:标记本轮插入排序的开始位。
  *  b:标记本轮插入排序的结束位。
  *  tag:当前在对比的序号;循环中的k
  */
  function quickSortDom(arr, a, b, tag) {
    var html = '',
      item = '',
      len = arr.length,
      i
    for (i = 0; i < len; i++) {
      spanClass = 'sort_span'

      if (a <= i && i <= b) {
        spanClass += ' sort_span_blue'
      }

      if (i == tag) {
        spanClass += ' sort_span_tag'
      }
      item = '<li class="sort_li"><span class="' + spanClass + '" style="height: ' + arr[i] + '%"></span></li>'

      html = html + item
    }
    document.querySelector('.sort_ul').innerHTML = html
  }
  //选择排序  依次跟每一个比较求最小值。
  function selectSort(oriArr) {
    var arr = oriArr.slice()
    for (let i = 0; i < arr.length - 1; i++) {
      var k = i
      var temp = arr[i]
      for (let j = i + 1; j < arr.length; j++) {
        if (temp > arr[j]) {
          temp = arr[j]
          k = j
        }
        this.pushHis(arr.slice(), i - 1, j, k, temp)
      }
      arr[k] = arr[i]
      arr[i] = temp
      this.pushHis(arr.slice(), i)
    }
    return arr
  }

  /*
  *  arr:数组
  *  a:当前已完成排序的数量。排序循环中的i。
  *  b:当前在比较的位。循环中的j;
  *  c:标记当前找到的最小位。循环中的k;
  *  temp:当前找到的最小值;
  */

  function selectSortDom(arr, a, b, c, temp) {
    var html = ''
    var item = ''
    var spanClass = ''
    for (let i = 0; i < arr.length; i++) {
      spanClass = 'sort_span'

      if (i <= a) {
        spanClass += ' sort_span_blue'
      }
      if (c == i) {
        spanClass += ' sort_span_tag'
      }

      if (i == b) {
        item =
          '<li class="sort_li"><span class="' +
          spanClass +
          '" style="height: ' +
          arr[i] +
          '%"></span><span class="sort_span_in" style="height:' +
          temp +
          '%"></span></li>'
      } else {
        item = '<li class="sort_li"><span class="' + spanClass + '" style="height: ' + arr[i] + '%"></span></li>'
      }

      html = html + item
    }
    document.querySelector('.sort_ul').innerHTML = html
  }

  function SortAnimation() {
    this.arrHis = []
    this.timer = ''
    this.sortName = 'bubble'
    this.sortObj = {
      bubble: [bubbleSort, bubbleSortDom],
      insert: [insertSort, insertSortDom],
      select: [selectSort, selectSortDom],
      quick: [quickSort, quickSortDom],
      merge: [mergeSort, mergeSortDom]
    }
    //目前拥有的排序方法。
    this.sort = this.sortObj[this.sortName][0]
    this.sortDom = this.sortObj[this.sortName][1]
    this.speed = 100 // 排列速度
    this.arr = [
      66,
      78,
      90,
      22,
      64,
      18,
      86,
      32,
      19,
      60,
      28,
      24,
      23,
      17,
      67,
      82,
      57,
      89,
      33,
      11,
      76,
      43,
      79,
      5,
      42,
      99,
      14,
      95,
      68,
      51,
      4,
      77,
      91,
      83,
      27,
      21,
      84,
      72,
      8,
      30,
      71,
      52,
      20,
      94,
      80,
      29,
      81,
      26,
      39,
      53
    ] // 数据
    this.arrLen = 50 // 数据个数
    this.sortRes = []
  }

  SortAnimation.prototype = {
    pushHis: function() {
      this.arrHis.push(arguments)
    },
    startAnimation: function() {
      var arrHis = this.arrHis
      var that = this
      this.timer = setInterval(function() {
        if (arrHis.length > 0) {
          that.sortDom(arrHis[0][0], arrHis[0][1], arrHis[0][2], arrHis[0][3], arrHis[0][4], arrHis[0][5], arrHis[0][6])
          arrHis.shift()
        } else {
          that.initDom(that.sortRes)
          clearInterval(that.timer)
        }
      }, this.speed)
    },
    changeSort: function(arg) {
      if (arg && this.sortObj[arg]) {
        this.sort = this.sortObj[arg][0]
        this.sortDom = this.sortObj[arg][1]
      } else {
        this.sort = this.sortObj['bubble'][0]
        this.sortDom = this.sortObj['bubble'][1]
      }
    },
    createArr: function(num) {
      var arr = this.arr
      arr.length = 0
      this.arrLen = num || this.arrLen
      for (let i = 0; i < this.arrLen; i++) {
        arr.push(getRandom(100))
      }
      document.getElementById('textareaArr').innerHTML = JSON.stringify(arr)
      this.initDom(arr)
    },
    arrSure: function() {
      this.arr = JSON.parse(document.getElementById('textareaArr').value)
      this.initDom(this.arr)
    },
    addEvent: function() {
      var that = this
      document.getElementById('form').onclick = function(event) {
        var target = event.target
        if (target.type == 'button') {
          var id = target.id
          if (id == 'createArr') {
            var len = document.getElementById('arrLen').value
            that.createArr(len)
          } else if (id == 'speedUp' || id == 'speedDown') {
            that.changeSpeed(id)
          } else if (id == 'arrSure') {
            that.arrSure()
          } else {
            if (document.getElementsByClassName('sorting_btn')[0]) {
              document.getElementsByClassName('sorting_btn')[0].setAttribute('class', '')
            }
            document.getElementById(id).setAttribute('class', ' sorting_btn')
            that.changeSort(id)
            that.arrHis.length = 0
            clearInterval(that.timer)
            that.sortRes = that.sort(that.arr)
            that.startAnimation()
          }
        }
      }
    },
    changeSpeed: function(id) {
      if (id == 'speedUp') {
        if (this.speed >= 40) {
          this.speed = this.speed - 30
        } else {
          return
        }
      }
      if (id == 'speedDown') {
        if (this.speed < 500) {
          this.speed = this.speed + 30
        } else {
          return
        }
      }
      clearInterval(this.timer)
      this.startAnimation()
    },
    init: function() {
      this.addEvent()
      this.initDom(this.arr)
    },
    initDom: function(arr) {
      arr = arr || []
      var html = ''
      var item = ''
      for (let i = 0; i < arr.length; i++) {
        item = '<li class="sort_li"><span class="sort_span" style="height: ' + arr[i] + '%"></span></li>'
        html = html + item
      }
      document.querySelector('.sort_ul').innerHTML = html
    }
  }

  var s = new SortAnimation()
  s.init()

  function getRandom(n) {
    return Math.floor(Math.random() * n + 1)
  }
})()
